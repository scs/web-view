# Makefile for Applications using the Oscar Framework
# Copyright (C) 2008 Supercomputing Systems AG
# 
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty. This file is offered as-is,
# without any warranty.

# Disable make's built-in rules.
MAKE += -RL --no-print-directory
SHELL := $(shell which bash)

# Include the file generated by te configuration process.
-include ../.config

##--------------------------------------------------------------------------
#  Application specific part
##--------------------------------------------------------------------------

# Binary executable to generate
PRODUCT := cgi

# Listings of source files
SOURCES := $(wildcard *.cpp) $(wildcard *.c)

# statically linked libraries
LIBS_host := ../oscar/library/libosc_host
LIBS_target := ../oscar/library/libosc_target

##--------------------------------------------------------------------------
#  Common part
##--------------------------------------------------------------------------

# Generic flags for the C/CPP compiler.
CFLAGS := -c -Wall -I../oscar/include



ifeq '$(CONFIG_USE_GPP_COMPILER)' 'y'
GCC := g++
else
CFLAGS += -std=gnu99
GCC := gcc
endif

CC_host := $(GCC) $(CFLAGS) -DOSC_HOST -D'APP_NAME="$(APP_NAME)"'
CC_target := bfin-uclinux-$(GCC) $(CFLAGS) -DOSC_TARGET -D'APP_NAME="$(APP_NAME)"'
LD_host := $(GCC) -fPIC
LD_target := bfin-uclinux-$(GCC) -elf2flt="-s 1048576"

ifeq '$(CONFIG_ENABLE_DEBUG)' 'y'
CC_host +=  -g
CC_target +=  -ggdb3
else
CC_host +=  -O2
CC_target +=  -O2
endif
ifeq '$(CONFIG_ENABLE_SIMULATION)' 'y'
CC_host += -DOSC_SIM
CC_target += -DOSC_SIM
endif

ifeq '$(CONFIG_ENABLE_SIMULATION)' 'y'
LIBS_target := $(LIBS_target)_sim
endif
ifeq '$(CONFIG_ENABLE_DEBUG)' 'y'
LIBS_host := $(addsuffix _dbg, $(LIBS_host))
LIBS_target := $(addsuffix _dbg, $(LIBS_target))
endif
LIBS_host := $(addsuffix .a, $(LIBS_host))
LIBS_target := $(addsuffix .a, $(LIBS_target))

BINARIES := $(addsuffix _host, $(PRODUCT)) $(addsuffix _target, $(PRODUCT))

.PHONY: all clean host target
all: $(BINARIES)

host target: %: $(addsuffix _%, $(PRODUCT))

# Build targets.
build/%_host.o: $(filter-out %.d, $(MAKEFILE_LIST))
	@ mkdir -p $(dir $@)
	$(CC_host) -MD $(filter $*.c $*.cpp,$(SOURCES)) -o $@
	@ grep -oE '[^ \\]+' < $(@:.o=.d) | sed -r '/:$$/d; s|^.*$$|$@: \0\n\0:|' > $(@:.o=.d~) && mv -f $(@:.o=.d){~,}
build/%_target.o: $(filter-out %.d, $(MAKEFILE_LIST))
	@ mkdir -p $(dir $@)
	$(CC_target) -MD $(filter $*.c $*.cpp,$(SOURCES)) -o $@
	@ grep -oE '[^ \\]+' < $(@:.o=.d) | sed -r '/:$$/d; s|^.*$$|$@: \0\n\0:|' > $(@:.o=.d~) && mv -f $(@:.o=.d){~,}

# Link targets.
$(PRODUCT)_host: $(patsubst %.cpp, build/%_host.o, $(patsubst %.c, build/%_host.o, $(SOURCES))) $(LIBS_host)
	$(LD_host) -o $@ $^ -lm
$(PRODUCT)_target: $(patsubst %.cpp, build/%_target.o, $(patsubst %.c, build/%_target.o, $(SOURCES))) $(LIBS_target)
	$(LD_target) -o $@ $^ -lm -lbfdsp

# Cleans the module.
clean:
	rm -rf build *.gdb $(BINARIES) 


